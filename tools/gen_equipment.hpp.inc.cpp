// std
#include <algorithm>
#include <cstdint>
#include <cstdlib>
#include <filesystem>
#include <fstream>
#include <print>
#include <string>
#include <string_view>
#include <vector>

// glz
#include <glaze/json.hpp>

/// @brief 無名名前空間で定義したいが, clangでエラーとなるので適当な名前空間に定義する.
/// glaze/reflection/get_name.hpp:27:19: error:
/// variable 'glz::detail::external<(anonymous namespace)::api_mst_slotitem_value_t>' is used
/// but not defined in this translation unit,
/// and cannot be defined in any other translation unit because its type does not have linkage
/// 27 |    extern const T external;
///    |                   ^
namespace kcv::tools {

// JSON解析のために, kcv::kcsapi::api_mst_slotitem型およびその型で明示的特殊化をしたkcv::read_jsonが必要となる.
// しかし, それらに依存すると依存解決が困難となるため, 不完全で簡易なapi_mst_slotitem型を改めてここに定義する.
// このままではJSON解析時にunknoen_keyeエラーが発生するため, これを抑制するように設定する.
constexpr auto opts = glz::opts{.error_on_unknown_keys = false};

struct api_mst_slotitem_value_t {
    std::int32_t api_id;
    std::string api_name;
};

using api_mst_slotitem = std::vector<api_mst_slotitem_value_t>;

}  // namespace kcv::tools

int main() {
    const auto src_fname = std::string_view{"./assets/api_mst_slotitem.json"};
    const auto dst_fname = std::filesystem::path{"./library/core/constants/equipment.hpp.inc"};

    auto data = kcv::tools::api_mst_slotitem{};
    if (auto buf = std::string{}; const auto error = glz::read_file_json<kcv::tools::opts>(data, src_fname, buf)) {
        std::println(stderr, "{}", glz::format_error(error, buf));
        return EXIT_FAILURE;
    }

    if (not std::ranges::is_sorted(data, {}, &kcv::tools::api_mst_slotitem::value_type::api_id)) {
        std::println(stderr, "error: api_mst_slotitem.json is not sorted.");
        return EXIT_FAILURE;
    }

    auto ofs = std::ofstream{dst_fname};
    ofs << "// generated by ./tools/gen_equipment.hpp.inc.cpp\n";
    ofs << "inline constexpr struct { "
           "kcv::kcsapi::equipment_id api_id; "
           "std::string_view api_name; "
           "} api_mst_slotitem[] = {\n";
    for (const auto& [api_id, api_name] : data) {
        ofs << "    {kcv::kcsapi::equipment_id{" << api_id << "}, \"" << api_name << "\"},\n";
    }
    ofs << "};";
}